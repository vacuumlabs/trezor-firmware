// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-solana-definitions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.solana_definitions.SolanaTokenInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct SolanaTokenInfo {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.name)
    pub name: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.ticker)
    pub ticker: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.address)
    pub address: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.standard)
    pub standard: ::std::option::Option<::protobuf::EnumOrUnknown<SolanaTokenStandard>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.decimals)
    pub decimals: ::std::option::Option<u32>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.solana_definitions.SolanaTokenInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SolanaTokenInfo {
    fn default() -> &'a SolanaTokenInfo {
        <SolanaTokenInfo as ::protobuf::Message>::default_instance()
    }
}

impl SolanaTokenInfo {
    pub fn new() -> SolanaTokenInfo {
        ::std::default::Default::default()
    }

    // optional string name = 1;

    pub fn name(&self) -> &str {
        match self.name.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_name(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if self.name.is_none() {
            self.name = ::std::option::Option::Some(::std::string::String::new());
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        self.name.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required string ticker = 2;

    pub fn ticker(&self) -> &str {
        match self.ticker.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_ticker(&mut self) {
        self.ticker = ::std::option::Option::None;
    }

    pub fn has_ticker(&self) -> bool {
        self.ticker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ticker(&mut self, v: ::std::string::String) {
        self.ticker = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ticker(&mut self) -> &mut ::std::string::String {
        if self.ticker.is_none() {
            self.ticker = ::std::option::Option::Some(::std::string::String::new());
        }
        self.ticker.as_mut().unwrap()
    }

    // Take field
    pub fn take_ticker(&mut self) -> ::std::string::String {
        self.ticker.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // required bytes address = 3;

    pub fn address(&self) -> &[u8] {
        match self.address.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_address(&mut self) {
        self.address = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.address = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.address.is_none() {
            self.address = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::vec::Vec<u8> {
        self.address.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required .hw.trezor.messages.solana_definitions.SolanaTokenStandard standard = 4;

    pub fn standard(&self) -> SolanaTokenStandard {
        match self.standard {
            Some(e) => e.enum_value_or(SolanaTokenStandard::SPL),
            None => SolanaTokenStandard::SPL,
        }
    }

    pub fn clear_standard(&mut self) {
        self.standard = ::std::option::Option::None;
    }

    pub fn has_standard(&self) -> bool {
        self.standard.is_some()
    }

    // Param is passed by value, moved
    pub fn set_standard(&mut self, v: SolanaTokenStandard) {
        self.standard = ::std::option::Option::Some(::protobuf::EnumOrUnknown::new(v));
    }

    // required uint32 decimals = 5;

    pub fn decimals(&self) -> u32 {
        self.decimals.unwrap_or(0)
    }

    pub fn clear_decimals(&mut self) {
        self.decimals = ::std::option::Option::None;
    }

    pub fn has_decimals(&self) -> bool {
        self.decimals.is_some()
    }

    // Param is passed by value, moved
    pub fn set_decimals(&mut self, v: u32) {
        self.decimals = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "name",
            |m: &SolanaTokenInfo| { &m.name },
            |m: &mut SolanaTokenInfo| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "ticker",
            |m: &SolanaTokenInfo| { &m.ticker },
            |m: &mut SolanaTokenInfo| { &mut m.ticker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "address",
            |m: &SolanaTokenInfo| { &m.address },
            |m: &mut SolanaTokenInfo| { &mut m.address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "standard",
            |m: &SolanaTokenInfo| { &m.standard },
            |m: &mut SolanaTokenInfo| { &mut m.standard },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "decimals",
            |m: &SolanaTokenInfo| { &m.decimals },
            |m: &mut SolanaTokenInfo| { &mut m.decimals },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SolanaTokenInfo>(
            "SolanaTokenInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SolanaTokenInfo {
    const NAME: &'static str = "SolanaTokenInfo";

    fn is_initialized(&self) -> bool {
        if self.ticker.is_none() {
            return false;
        }
        if self.address.is_none() {
            return false;
        }
        if self.standard.is_none() {
            return false;
        }
        if self.decimals.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.ticker = ::std::option::Option::Some(is.read_string()?);
                },
                26 => {
                    self.address = ::std::option::Option::Some(is.read_bytes()?);
                },
                32 => {
                    self.standard = ::std::option::Option::Some(is.read_enum_or_unknown()?);
                },
                40 => {
                    self.decimals = ::std::option::Option::Some(is.read_uint32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.name.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.ticker.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.address.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        if let Some(v) = self.standard {
            my_size += ::protobuf::rt::int32_size(4, v.value());
        }
        if let Some(v) = self.decimals {
            my_size += ::protobuf::rt::uint32_size(5, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.name.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.ticker.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.address.as_ref() {
            os.write_bytes(3, v)?;
        }
        if let Some(v) = self.standard {
            os.write_enum(4, ::protobuf::EnumOrUnknown::value(&v))?;
        }
        if let Some(v) = self.decimals {
            os.write_uint32(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SolanaTokenInfo {
        SolanaTokenInfo::new()
    }

    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.ticker = ::std::option::Option::None;
        self.address = ::std::option::Option::None;
        self.standard = ::std::option::Option::None;
        self.decimals = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SolanaTokenInfo {
        static instance: SolanaTokenInfo = SolanaTokenInfo {
            name: ::std::option::Option::None,
            ticker: ::std::option::Option::None,
            address: ::std::option::Option::None,
            standard: ::std::option::Option::None,
            decimals: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SolanaTokenInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SolanaTokenInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SolanaTokenInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SolanaTokenInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hw.trezor.messages.solana_definitions.SolanaTokenStandard)
pub enum SolanaTokenStandard {
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.solana_definitions.SolanaTokenStandard.SPL)
    SPL = 0,
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.solana_definitions.SolanaTokenStandard.TOKEN22)
    TOKEN22 = 1,
}

impl ::protobuf::Enum for SolanaTokenStandard {
    const NAME: &'static str = "SolanaTokenStandard";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SolanaTokenStandard> {
        match value {
            0 => ::std::option::Option::Some(SolanaTokenStandard::SPL),
            1 => ::std::option::Option::Some(SolanaTokenStandard::TOKEN22),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<SolanaTokenStandard> {
        match str {
            "SPL" => ::std::option::Option::Some(SolanaTokenStandard::SPL),
            "TOKEN22" => ::std::option::Option::Some(SolanaTokenStandard::TOKEN22),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [SolanaTokenStandard] = &[
        SolanaTokenStandard::SPL,
        SolanaTokenStandard::TOKEN22,
    ];
}

impl ::protobuf::EnumFull for SolanaTokenStandard {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("SolanaTokenStandard").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for SolanaTokenStandard {
    fn default() -> Self {
        SolanaTokenStandard::SPL
    }
}

impl SolanaTokenStandard {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<SolanaTokenStandard>("SolanaTokenStandard")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n!messages-solana-definitions.proto\x12%hw.trezor.messages.solana_defin\
    itions\"\xcb\x01\n\x0fSolanaTokenInfo\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x16\n\x06ticker\x18\x02\x20\x02(\tR\x06ticker\x12\x18\n\
    \x07address\x18\x03\x20\x02(\x0cR\x07address\x12V\n\x08standard\x18\x04\
    \x20\x02(\x0e2:.hw.trezor.messages.solana_definitions.SolanaTokenStandar\
    dR\x08standard\x12\x1a\n\x08decimals\x18\x05\x20\x02(\rR\x08decimals*+\n\
    \x13SolanaTokenStandard\x12\x07\n\x03SPL\x10\0\x12\x0b\n\x07TOKEN22\x10\
    \x01\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SolanaTokenInfo::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(SolanaTokenStandard::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
