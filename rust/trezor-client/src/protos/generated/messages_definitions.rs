// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-definitions.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.definitions.Definitions)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Definitions {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.definitions.Definitions.encoded_ethereum_network)
    pub encoded_ethereum_network: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.definitions.Definitions.encoded_ethereum_token)
    pub encoded_ethereum_token: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.definitions.Definitions.encoded_solana_token)
    pub encoded_solana_token: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.definitions.Definitions.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Definitions {
    fn default() -> &'a Definitions {
        <Definitions as ::protobuf::Message>::default_instance()
    }
}

impl Definitions {
    pub fn new() -> Definitions {
        ::std::default::Default::default()
    }

    // optional bytes encoded_ethereum_network = 1;

    pub fn encoded_ethereum_network(&self) -> &[u8] {
        match self.encoded_ethereum_network.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encoded_ethereum_network(&mut self) {
        self.encoded_ethereum_network = ::std::option::Option::None;
    }

    pub fn has_encoded_ethereum_network(&self) -> bool {
        self.encoded_ethereum_network.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encoded_ethereum_network(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoded_ethereum_network = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_ethereum_network(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encoded_ethereum_network.is_none() {
            self.encoded_ethereum_network = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encoded_ethereum_network.as_mut().unwrap()
    }

    // Take field
    pub fn take_encoded_ethereum_network(&mut self) -> ::std::vec::Vec<u8> {
        self.encoded_ethereum_network.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes encoded_ethereum_token = 2;

    pub fn encoded_ethereum_token(&self) -> &[u8] {
        match self.encoded_ethereum_token.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encoded_ethereum_token(&mut self) {
        self.encoded_ethereum_token = ::std::option::Option::None;
    }

    pub fn has_encoded_ethereum_token(&self) -> bool {
        self.encoded_ethereum_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encoded_ethereum_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoded_ethereum_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_ethereum_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encoded_ethereum_token.is_none() {
            self.encoded_ethereum_token = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encoded_ethereum_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_encoded_ethereum_token(&mut self) -> ::std::vec::Vec<u8> {
        self.encoded_ethereum_token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes encoded_solana_token = 3;

    pub fn encoded_solana_token(&self) -> &[u8] {
        match self.encoded_solana_token.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encoded_solana_token(&mut self) {
        self.encoded_solana_token = ::std::option::Option::None;
    }

    pub fn has_encoded_solana_token(&self) -> bool {
        self.encoded_solana_token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encoded_solana_token(&mut self, v: ::std::vec::Vec<u8>) {
        self.encoded_solana_token = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encoded_solana_token(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encoded_solana_token.is_none() {
            self.encoded_solana_token = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encoded_solana_token.as_mut().unwrap()
    }

    // Take field
    pub fn take_encoded_solana_token(&mut self) -> ::std::vec::Vec<u8> {
        self.encoded_solana_token.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encoded_ethereum_network",
            |m: &Definitions| { &m.encoded_ethereum_network },
            |m: &mut Definitions| { &mut m.encoded_ethereum_network },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encoded_ethereum_token",
            |m: &Definitions| { &m.encoded_ethereum_token },
            |m: &mut Definitions| { &mut m.encoded_ethereum_token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encoded_solana_token",
            |m: &Definitions| { &m.encoded_solana_token },
            |m: &mut Definitions| { &mut m.encoded_solana_token },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Definitions>(
            "Definitions",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Definitions {
    const NAME: &'static str = "Definitions";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.encoded_ethereum_network = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.encoded_ethereum_token = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.encoded_solana_token = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.encoded_ethereum_network.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.encoded_ethereum_token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.encoded_solana_token.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.encoded_ethereum_network.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.encoded_ethereum_token.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.encoded_solana_token.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Definitions {
        Definitions::new()
    }

    fn clear(&mut self) {
        self.encoded_ethereum_network = ::std::option::Option::None;
        self.encoded_ethereum_token = ::std::option::Option::None;
        self.encoded_solana_token = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Definitions {
        static instance: Definitions = Definitions {
            encoded_ethereum_network: ::std::option::Option::None,
            encoded_ethereum_token: ::std::option::Option::None,
            encoded_solana_token: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Definitions {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Definitions").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Definitions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Definitions {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:hw.trezor.messages.definitions.DefinitionType)
pub enum DefinitionType {
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.definitions.DefinitionType.ETHEREUM_NETWORK)
    ETHEREUM_NETWORK = 0,
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.definitions.DefinitionType.ETHEREUM_TOKEN)
    ETHEREUM_TOKEN = 1,
    // @@protoc_insertion_point(enum_value:hw.trezor.messages.definitions.DefinitionType.SOLANA_TOKEN)
    SOLANA_TOKEN = 2,
}

impl ::protobuf::Enum for DefinitionType {
    const NAME: &'static str = "DefinitionType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DefinitionType> {
        match value {
            0 => ::std::option::Option::Some(DefinitionType::ETHEREUM_NETWORK),
            1 => ::std::option::Option::Some(DefinitionType::ETHEREUM_TOKEN),
            2 => ::std::option::Option::Some(DefinitionType::SOLANA_TOKEN),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DefinitionType> {
        match str {
            "ETHEREUM_NETWORK" => ::std::option::Option::Some(DefinitionType::ETHEREUM_NETWORK),
            "ETHEREUM_TOKEN" => ::std::option::Option::Some(DefinitionType::ETHEREUM_TOKEN),
            "SOLANA_TOKEN" => ::std::option::Option::Some(DefinitionType::SOLANA_TOKEN),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DefinitionType] = &[
        DefinitionType::ETHEREUM_NETWORK,
        DefinitionType::ETHEREUM_TOKEN,
        DefinitionType::SOLANA_TOKEN,
    ];
}

impl ::protobuf::EnumFull for DefinitionType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DefinitionType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DefinitionType {
    fn default() -> Self {
        DefinitionType::ETHEREUM_NETWORK
    }
}

impl DefinitionType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DefinitionType>("DefinitionType")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1amessages-definitions.proto\x12\x1ehw.trezor.messages.definitions\"\
    \xaf\x01\n\x0bDefinitions\x128\n\x18encoded_ethereum_network\x18\x01\x20\
    \x01(\x0cR\x16encodedEthereumNetwork\x124\n\x16encoded_ethereum_token\
    \x18\x02\x20\x01(\x0cR\x14encodedEthereumToken\x120\n\x14encoded_solana_\
    token\x18\x03\x20\x01(\x0cR\x12encodedSolanaToken*L\n\x0eDefinitionType\
    \x12\x14\n\x10ETHEREUM_NETWORK\x10\0\x12\x12\n\x0eETHEREUM_TOKEN\x10\x01\
    \x12\x10\n\x0cSOLANA_TOKEN\x10\x02B?\n#com.satoshilabs.trezor.lib.protob\
    ufB\x18TrezorMessageDefinitions\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Definitions::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DefinitionType::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
